# Comprehensive RISC-V CPU Simulator Test Program
# Tests all implemented instructions with expected outputs

# Initialize registers with test values
    0:        00100293        addi x5 x0 1        # t0 = 1
    4:        00200313        addi x6 x0 2        # t1 = 2
    8:        00300393        addi x7 x0 3        # t2 = 3
    c:        00400413        addi x8 x0 4        # s0 = 4
    10:        00500493        addi x9 x0 5        # s1 = 5

# R-type arithmetic instructions
    14:        00628333        add x6 x5 x6        # t1 = t0 + t1 = 1 + 2 = 3
    18:        406303b3        sub x7 x6 x6        # t2 = t1 - t1 = 3 - 3 = 0
    1c:        00740433        add x8 x8 x7        # s0 = s0 + t2 = 4 + 0 = 4

# R-type logical instructions
    20:        0064e4b3        or x9 x9 x6         # s1 = s1 | t1 = 5 | 3 = 7
    24:        0064c4b3        xor x9 x9 x6        # s1 = s1 ^ t1 = 7 ^ 3 = 4
    28:        0064f4b3        and x9 x9 x6        # s1 = s1 & t1 = 4 & 3 = 0

# R-type shift instructions
    2c:        0014c4b3        srl x9 x9 x1        # s1 = s1 >> 1 = 0 >> 1 = 0
    30:        0014a4b3        sll x9 x9 x1        # s1 = s1 << 1 = 0 << 1 = 0
    34:        4014c4b3        sra x9 x9 x1        # s1 = s1 >> 1 = 0 >> 1 = 0

# R-type comparison instructions
    38:        0064a4b3        slt x9 x9 x6        # s1 = (s1 < t1) ? 1 : 0 = (0 < 3) ? 1 : 0 = 1
    3c:        0064b4b3        sltu x9 x9 x6       # s1 = (s1 < t1) ? 1 : 0 = (0 < 3) ? 1 : 0 = 1

# I-type arithmetic instructions
    40:        00628293        addi x5 x5 6        # t0 = t0 + 6 = 1 + 6 = 7
    44:        00730313        addi x6 x6 7        # t1 = t1 + 7 = 3 + 7 = 10

# I-type logical instructions
    48:        00f4e493        ori x9 x9 15        # s1 = s1 | 15 = 1 | 15 = 15
    4c:        00f4c493        xori x9 x9 15       # s1 = s1 ^ 15 = 15 ^ 15 = 0
    50:        00f4f493        andi x9 x9 15       # s1 = s1 & 15 = 0 & 15 = 0

# I-type shift instructions
    54:        0024d493        srli x9 x9 2        # s1 = s1 >> 2 = 0 >> 2 = 0
    58:        00249493        slli x9 x9 2        # s1 = s1 << 2 = 0 << 2 = 0
    5c:        4024d493        srai x9 x9 2        # s1 = s1 >> 2 = 0 >> 2 = 0

# I-type comparison instructions
    60:        0064a493        slti x9 x9 6        # s1 = (s1 < 6) ? 1 : 0 = (0 < 6) ? 1 : 0 = 1
    64:        0064b493        sltiu x9 x9 6       # s1 = (s1 < 6) ? 1 : 0 = (0 < 6) ? 1 : 0 = 1

# Load/Store instructions
    68:        00002023        sw x0 0 x0          # Store 0 at memory address 0
    6c:        00502223        sw x5 4 x0          # Store t0 (7) at memory address 4
    70:        00602423        sw x6 8 x0          # Store t1 (10) at memory address 8
    74:        00002503        lw x10 0 x0         # Load from address 0 to a0
    78:        00402583        lw x11 4 x0         # Load from address 4 to a1
    7c:        00802603        lw x12 8 x0         # Load from address 8 to a2

# Branch instructions (conditional)
    80:        0064a063        beq x9 x6 0         # Branch if s1 == t1 (1 == 10) = false, no branch
    84:        0064a263        beq x9 x6 4         # Branch if s1 == t1 (1 == 10) = false, no branch
    88:        00649463        bne x9 x6 8         # Branch if s1 != t1 (1 != 10) = true, branch
    8c:        0064a663        beq x9 x6 12        # This should not execute due to branch above
    90:        0064b863        bne x9 x6 16        # This should not execute due to branch above

# Jump instructions
    94:        0100006f        jal x0 16           # Jump forward 16 bytes
    98:        0064a063        beq x9 x6 0         # This should not execute due to jump above
    9c:        0064a263        beq x9 x6 4         # This should not execute due to jump above

# Final register values for verification
    a0:        00000000        # Should be 0 (loaded from memory address 0)
    a4:        00000007        # Should be 7 (loaded from memory address 4)
    a8:        0000000a        # Should be 10 (loaded from memory address 8)
    ac:        00000001        # s1 should be 1 (from sltiu)
    b0:        00000007        # t0 should be 7
    b4:        0000000a        # t1 should be 10
    b8:        00000000        # t2 should be 0
    bc:        00000004        # s0 should be 4

#end

# Expected final register values:
# a0 = 0 (loaded from memory[0])
# a1 = 7 (loaded from memory[4]) 
# a2 = 10 (loaded from memory[8])
# t0 = 7
# t1 = 10
# t2 = 0
# s0 = 4
# s1 = 1 